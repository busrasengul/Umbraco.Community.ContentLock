// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { BulkUnlockData, BulkUnlockError, LockContentData, LockContentError, LockOverviewData, LockOverviewResponse, StatusData, StatusResponse, UnlockContentData, UnlockContentError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class ContentLockService {
    public static bulkUnlock<ThrowOnError extends boolean = false>(options?: Options<BulkUnlockData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, BulkUnlockError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/contentlock/api/v1/BulkUnlock',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static lockContent<ThrowOnError extends boolean = false>(options: Options<LockContentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, LockContentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/contentlock/api/v1/Lock/{key}',
            ...options
        });
    }
    
    public static lockOverview<ThrowOnError extends boolean = false>(options?: Options<LockOverviewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<LockOverviewResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/contentlock/api/v1/LockOverview',
            ...options
        });
    }
    
    public static status<ThrowOnError extends boolean = false>(options: Options<StatusData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<StatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/contentlock/api/v1/Status/{key}',
            ...options
        });
    }
    
    public static unlockContent<ThrowOnError extends boolean = false>(options: Options<UnlockContentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<unknown, UnlockContentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/contentlock/api/v1/Unlock/{key}',
            ...options
        });
    }
    
}